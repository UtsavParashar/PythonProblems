Cohesion and Coupling
---------------------
These both tell how easily you code can be maintained i.e changed or extended.
Cohesion:- Cohesion is the degree to which elements of a certain class or function belong together.
Eg: Take a look at this function
def handle_stuff(d:Data, quantity:int, screen:int, screen:int, status:int, c:Color):
    update_corporate_database(d, q, status)
    for i in range(0, quantity):
        profit[i] = revenue[i] - expense[i] * status
    new_color = c
    status = SUCCESS
    display_profits(screenX, screenY, status, d, c)
    ...
Issues with above code:
1. Function name is a red flag
2. It has weak cohesion i.e it does a lot of different that do not really belong together, a function with strong cohesion has a clear responsibility, it has only one task an example of a function with strong cohesion is the cosine fn in python's math lib. It does only one thing, compute the cosine of a number and that's it.
Having strong cohesion is imp, it makes your code easier to maintain and understand, code that does one thing only is lost easier to reuse than a giant function doing lots of different unrelated things.
IN MY WORDS - STRONG COHESION IS EQUIVALENT TO A SINGLE RESPONSIBILITY PRINCIPLE.

COUPLING -
Coupling means how dependent are two parts of the code on each other.
Let's take a look at this example:
def checkEmailSecurity(email):
    if email.header.bearer.invalid():
        raise Exception("Email header bearer is invalid")
    elif email.header.received != email.header.received_spf:
        raise Exception("Received Mismatch")
    else:
        print("Email header is secure")

In above function, we can say that this function (checkEmailSecurity) is highly coupled with email object.
Since the code in the above function directly accesses data that's deep in the structure of email object.
High couping is not good because making changes in one place might require changes at many places.

In practise there might be some couping in your code because the various parts of the code needs to work together somehow but the more coupling you introduce the more difficult it becomes to maintain your code. In order to solve the coupling issues in this case you can either pass along only the data that the function needs instead of the entire email object or you can move this function inside the email object since its so directly related to the data in the object.

Coupling and cohesion are important metrics for software quality. Unfortunately you can't simply compute a number that tells you how cohesive or how coupled your code is, it comes down to you as a developer to understand the structure of your code well. Being able to analyze your code in terms of cohesion and coupling and improve it.

In general we need to learn to make right decision when we are designing a piece of software, you will become better at this when you become a senior software developer but it's a skill you need to train yourself in.

General Rule - Provide methods in the class where mostly the data/information is present.

Example:




