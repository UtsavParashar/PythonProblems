Pandas
## Merging Joining & Concatenation
# Concatination is similar to uj
# Concatination can work as horizontal join when axis=1 only if column names are different in kdb
df1 = pd.DataFrame({'a':[10,20,30],'b':[100,200,300]})
df2 = pd.DataFrame({'a':[40,50,60],'b':[400,500,None]})
df3 = pd.DataFrame({'a':[70,80,90],'b':[700,800,900],'c':[1000,2000,3000]})
pd.concat([df1,df2], axis=1)
#pd.concat([df1,df2,df3])

# Merging is similar to inner and left join where we have keyed columns in both tables
df1=pd.DataFrame({'key':['a0','a1','a2'],'a':[10,20,30],'b':[100,200,300]})
df2=pd.DataFrame({'key':['a0','a4','a2'],'c':[40,50,60],'d':[400,500,600]})
pd.merge(df1,df2,how='inner',on='key') # 'how' can be inner(default), outer, left, right
pd.merge(df1,df2,how='outer',on='key')

## Join is similar to merge with the difference 
## that merge is done on a column
## and join is performed on index
df1=pd.DataFrame({'a':[10,20,30],'b':[100,200,300]}, index=['a0','a1','a2'])
df2=pd.DataFrame({'c':[40,50,60],'d':[400,500,600]}, index=['a0','a4','a2'])
df1.join(df2)
df1.join(df2, how='left')

Get unique values from a column of a df
df=pd.DataFrame({'a':[10,20,30],'b':[100,201,100]})
print(df['b'].unique())# Get unique values of column 'b' in output
print(df['b'].nunique())# Get count of unique values of column 'b' in output
print(df['b'].value_counts()) # Get the count of occurence of each value in col 'b'

apply() - In order to apply custom(user defined functions) to a df col, we can use apply method.
It is one of the most powerful function of df.
def times2(x):
    return 2*x
df['b'].apply(times2)
Or we can pass a lambda function to it
df['a'].apply(lambda x:x*2)

Get the list of col names
df.columns

For index
df.index



