Pandas: Panel Data
-------

Series: Series are similar to Numpy arrays, except that we can give them a named or datetime index, instead of just a numerical index.
Series can hold heterogeneous data.

Series had two main object - data and index.
We can create series with either list, numpy array or a dict.
Eg: 
import numpy as np
import pandas as pd

labels = ['a','b','c']
l = list([10, 200, 30])
npa = np.arange(10,31,10)
d = {'a':10, 'b':20, 'c':300}
print(pd.Series(data = l, index = labels))
print('*'*20)
print(pd.Series(npa,labels))
print('*'*20)
print(pd.Series(d))

DataFrame - It can be considered as a combination of series as we have table as the combination of column in kdb and each column is a dict of key(columnName) and value(columnValues)
DataFrame has 3 important objects - data, index and columnsNames

I consider pandas similar to columnar database table like kdb.
Here each dataframe is a collection of series similar to table being collection of columns in kdb+.


import numpy as np
import pandas as pd
pd.DataFrame(np.arange(1,17).reshape(4,4), ['a','b','c','d'], ['c1','c2','c3','c4'])

How can you tell that DataFrame is a combination of series?
type(df['c1']) # pandas.core.series.Series

you can fetch a column from a dataframe using 
import numpy as np
import pandas as pd

df = pd.DataFrame(np.arange(1,17).reshape(4,4),('A','B','C','D'),('W','X','Y','Z'))
df['W']

Other way to fetch a column from a series is
df.W # This is not recommended because in the say way we call the methods over dataframe

To fetch more than one column we need to pass a list of columns
df[['W','Y']] 
Confirmation of it being a list - df[list(('W','Y'))]

To add a new column to a dataframe
df['New'] = df['W'] + df['X']

NOTE - axis = 0 is for row and axis = 1 is for column because we use df(row,column) hence row is at index 0 and column is at index 1.
Do df.shape and you will find row at index 0 and column at index 1 Eg - df.shape # (3, 4), 3 rows and 4 cols

To drop a column from dataframe we can use drop method but we need to take care of two things:
1. we need to provide axis = 1 as 0 is for row and 1 is for column.
2. we need to provide inplace = True to drop the column permanently as we have `table in kdb.
df.drop('New', axis=1, inplace=True)

To drop a row
df.drop('D', inplace=True)

We can fetch the rows from a df in two ways.
1. Using loc by providing the index name
    df.loc['B']
2. Using iloc by providing the index number
    df.iloc[1]
Again rows are a collection of series.
Hence both rows and columns are collection of series in dataframe.

To get a particular a particular value from a row and column
df.loc['A','X'] # 2

We can also fetch the list of rows and columns
df.loc[['A','C'],['W','Y']]

For a dataframe if we want to get the dataframe output based on any condition like get only the values in the dataframe where value is greater than 5
df[df > 5] ## False returns NaN
In practise  we run boolean filter over a column and the output does not consists of the rows where the value is False hence we do not get NaN in that case.
df[df['W']>6]
and in the output if we want only two columns say W and X col
df[df['W']>6][['W','X']]

Get the result based on multiple conditions
df[(df['W']>3) & (df['Y']<15)]

Why are we using & and not 'and' operator in the above code?
Because 'and' works on singular values like 'True' and 'False' but not on series of values.

reset_index() - If you want to convert the index to a column and replace it with numerical index then we can go with reset_index().
In does not occur in place, to get it done place inplace = True
df.reset_index()

In order to set some other column to index, set_index() can be used.
df['States'] = 'CA NY WD TX'.split()
df.set_index('States') # inplace is required to make it permanent







Pandas
## Merging Joining & Concatenation
# Concatination is similar to uj
# Concatination can work as horizontal join when axis=1 only if column names are different in kdb
df1 = pd.DataFrame({'a':[10,20,30],'b':[100,200,300]})
df2 = pd.DataFrame({'a':[40,50,60],'b':[400,500,None]})
df3 = pd.DataFrame({'a':[70,80,90],'b':[700,800,900],'c':[1000,2000,3000]})
pd.concat([df1,df2], axis=1)
#pd.concat([df1,df2,df3])

# Merging is similar to inner and left join where we have keyed columns in both tables
df1=pd.DataFrame({'key':['a0','a1','a2'],'a':[10,20,30],'b':[100,200,300]})
df2=pd.DataFrame({'key':['a0','a4','a2'],'c':[40,50,60],'d':[400,500,600]})
pd.merge(df1,df2,how='inner',on='key') # 'how' can be inner(default), outer, left, right
pd.merge(df1,df2,how='outer',on='key')

## Join is similar to merge with the difference 
## that merge is done on a column
## and join is performed on index
df1=pd.DataFrame({'a':[10,20,30],'b':[100,200,300]}, index=['a0','a1','a2'])
df2=pd.DataFrame({'c':[40,50,60],'d':[400,500,600]}, index=['a0','a4','a2'])
df1.join(df2)
df1.join(df2, how='left')

Get unique values from a column of a df
df=pd.DataFrame({'a':[10,20,30],'b':[100,201,100]})
print(df['b'].unique())# Get unique values of column 'b' in output
print(df['b'].nunique())# Get count of unique values of column 'b' in output
print(df['b'].value_counts()) # Get the count of occurence of each value in col 'b'

apply() - In order to apply custom(user defined functions) to a df col, we can use apply method.
It is one of the most powerful function of df.
def times2(x):
    return 2*x
df['b'].apply(times2)
Or we can pass a lambda function to it
df['a'].apply(lambda x:x*2)

Get the list of col names
df.columns

For index
df.index



