Numpy stands for Numerical Python
NumPy is a numerical library for python that allows for exteremely fast data generation and handling.
It utilizes arrays which can efficiently store data(much better than a built in normal python list)
Understanding numpy is crucial to truly mastering pandas.

Numpy has:
Numpy arrays
Numpy indexing and selection
Numpy operations

Numpy arrays basically comes under two flavors:
1. Vectors - One dimentional arrays
2. matrix - 2 dimention i.e it has one row and one col in numpy. It's a list of list.

Performace wise numpy arrays are far better than list
import numpy as np
#Creating numpy array
l=[1,2,3]
type(np.array(l)) # convert list to a vector

Comparision Example:

import time
l=list(range(50000000))
st = time.time()
for i in l:
    i*2
print(time.time() - st)
n=np.array(l)
st = time.time()
n*2
print(time.time() - st)

Output:
7.179000616073608
0.5665650367736816

np.array(list([[1,2,3],[4,5,6],[7,8,9]]))

Similar to  range in python, numpy has arange which is used to generate a sequence of numbers.
np.arange(1,10,2)

we can get an array of zeros using
np.zeros(3) # List of zeros
np.zeros((2,3)) # Multi dimentional list of zeros with 2 rows and 3 columns

similar to zeros we haves ones function as well
np.ones(4)
np.ones((2,4))

np.linspace() is a useful function which provides specified linearly spaced numbers between two numbers.
Is is different from arange like if we want to 3 linealy spaced numbers between 0 and 10 we can use linspace. (Still in doubt, look at the example)
np.linspace(0,10,3) # array([ 0.,  5., 10.])

Identity Matrix: np.eye(4)

Random Numbers:
There are lots of ways to generate random numbers.
import numpy as np
np.random.rand(5) # Generate 5 random numbers between 0.0 and 1.0 [0.,1)
np.random.rand(2,3)

np.random.randn(5) # Standard Normal Distribution

np.random.randint(1,100,10) - give me 10 random integers between 1 and 100

reshape() - To reshape an existing array we can use reshape method.
arr = np.arange(25)
ranarr = np.random.randint(1,100,10)
print(arr)
print(ranarr)
## To reshape arr to a 2d 5,5 array
arr.reshape(5,5)
ranarr.reshape(2,5)

shape - we can get the shape field of an array using shape(), it tells if the array is 1D, 2D etc
arr.reshape(5,5).shape # (5, 5)

dtype - we can use dtype to get the type of the values in an array
np.array([1,2.0,3,'a']).dtype # dtype('<U32')

max(), min() - to get max, min values of an array
Statistical Functions in Numpy - https://numpy.org/doc/stable/reference/routines.statistics.html
argmax() - to get the index of the max value in the array

Numpy Operations:
arr = np.arange(10)
print(arr + arr)

Dividing by Zero - in Numpy does not raise an error but shows warning.

np.sqrt(arr)
np.max(arr)
np.exp(arr)

Broadcasting:
Broadcasting can be done in numpy array but not in list.
Before that what is broadcasting, look at the example below and you will understand.
a = np.arange(10)
a[:5] = 100
a # array([100, 100, 100, 100, 100,   5,   6,   7,   8,   9])

First 5 elements are assigned value 100, this is broadcasting assigning more than one elements with a value in one go.
This could not be done with list.
l = list(range(10))
l[:5] = 100 ## TypeError: can only assign an iterable

In numpy array also if you want to do a shallow copy, you will have to use copy method otherwise '=' operator will repoint the new reference to same object.

you can get the values from the matrix or 2D array using a[row,col]. This is also helpful if we want to get a matrix output a[1:,:1]
a= np.arange(20).reshape(4,5)
a[1:,:2]
Out:
array([[ 5,  6],
       [10, 11],
       [15, 16]])

## Conditional Selection
If we want to get value of an array based on conditional statement then we can go for conditional selection.
## Conditional Selection
a = np.arange(1,11)
boolean_array = a > 4
a[boolean_array] ## array([ 5,  6,  7,  8,  9, 10])

Practically used conditional selection:
a = np.arange(1,11)
a[a>4] ## array([ 5,  6,  7,  8,  9, 10])


-----------------------------------------------------------------
Book: https://www.labri.fr/perso/nrougier/from-python-to-numpy/
=====

Numpy is all about vectorization. If you are familiar with Python, this is the main difficulty you'll face because you'll need to change your way of thinking and your new friends (among others) are named "vectors", "arrays", "views" or "ufuncs".

Let's take a very simple example, random walk. One possible object oriented approach would be to define a RandomWalker class and write a walk method that would return the current position after each (random) step. It's nice, it's readable, but it is slow:

Object Oriented Method:
import random
import timeit
class RandomWalker:
    def __init__(self):
        self.position = 0
        
    def walk(self, n):
        self.position = 0
        for i in range(n):
            yield self.position
            self.position += 2 * random.randint(0,1) - 1

walker = RandomWalker()
timeit.Timer('[position for position in walker.walk(10000)]', 'from __main__ import walker').timeit(100)
# 1.418

Procedural approach
For such a simple problem, we can probably save the class definition and concentrate only on the walk method that computes successive positions after each random step.

def walk(n):
    position = 0
    walk = [position]
    for i in range(n):
        position += 2 * random.randint(0,1) - 1
        walk.append(position)
    return walk
timeit.Timer('walk(10000)', 'from __main__ import walk').timeit(100)
# 1.2812

This new method saves some CPU cycles but not that much because this function is pretty much the same as in the object-oriented approach and the few cycles we saved probably come from the inner Python object-oriented machinery.

VECTORIZED APPROACH
But we can do better using the itertools Python module that offers a set of functions creating iterators for efficient looping. If we observe that a random walk is an accumulation of steps, we can rewrite the function by first generating all the steps and accumulate them without any loop:

def random_walk(n=1000):
    steps = np.random.choice([-1,+1], n)
    return np.cumsum(steps)
timeit.Timer('random_walk(10000)', 'from __main__ import random_walk').timeit(100)
# 0.0189

Not too difficult, but we gained a factor 500x using numpy:
This book is about vectorization, be it at the code or problem level. We'll see this difference is important before looking at custom vectorization.








