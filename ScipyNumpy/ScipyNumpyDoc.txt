This part of the Scipy lecture notes is a self-contained introduction to everything that is needed to use Python for science, from the language itself, to numerical computing or plotting.

Python scientific computing ecosystem
--------------------------------------
1.1.1 The scientist’s needs
• Get data (simulation, experiment control),
• Manipulate and process data,
• Visualize results, quickly to understand, but also with high quality figures, for reports or publica- tions.
1.1.2 Python’s strengths
• Batteries included Rich collection of already existing bricks of classic numerical methods, plot- ting or data processing tools. We don’t want to re-program the plotting of a curve, a Fourier transform or a fitting algorithm. Don’t reinvent the wheel!
• Easy to learn Most scientists are not payed as programmers, neither have they been trained so. They need to be able to draw a curve, smooth a signal, do a Fourier transform in a few minutes.
• Easy communication To keep code alive within a lab or a company it should be as readable as a book by collaborators, students, or maybe customers. Python syntax is simple, avoiding strange symbols or lengthy routine specifications that would divert the reader from mathematical or scientific understanding of the code.
• Efficient code Python numerical modules are computationally efficient. But needless to say that a very fast code becomes useless if too much time is spent writing it. Python aims for quick development times and quick execution times.
• Universal Python is a language used for many different problems. Learning Python avoids learning a new software for each new problem.

1.1.3 How does Python compare to other solutions? Compiled languages: C, C++, Fortran. . .
Pros
• Very fast. For heavy computations, it’s difficult to outperform these languages.
Cons
 Painful usage: no interactivity during development, mandatory compilation steps, verbose syntax, manual memory management. These are difficult languages for non programmers.

Matlab scripting language
Pros
• Very rich collection of libraries with numerous algorithms, for many different do- mains. Fast execution because these libraries are often written in a compiled lan- guage.
• Pleasant development environment: comprehensive and help, integrated editor, etc.
• Commercial support is available.
Cons
• Base language is quite poor and can become restrictive for advanced users.
• Not free.

Julia
Pros
• Fast code, yet interactive and simple.
• Easily connects to Python or C.
Cons
• Ecosystem limited to numerical computing.
• Still young.

Other scripting languages: Scilab, Octave, R, IDL, etc.
Pros
• Open-source, free, or at least cheaper than Matlab.
• Some features can be very advanced (statistics in R, etc.)
Cons
• Fewer available algorithms than in Matlab, and the language is not more advanced.
• Some software are dedicated to one domain. Ex: Gnuplot to draw curves. These programs are very powerful, but they are restricted to a single type of usage, such as plotting.

Python
Pros
• Very rich scientific computing libraries
• Well thought out language, allowing to write very readable and well structured code: we “code what we think”.
• Many libraries beyond scientific computing (web server, serial port access, etc.)
• Free and open-source software, widely spread, with a vibrant community.
• A variety of powerful environments to work in, such as IPython, Spyder, Jupyter notebooks, Pycharm, Visual Studio Code
Cons
• Not all the algorithms that can be found in more specialized software or toolboxes.

1.2 The Scientific Python ecosystem
Unlike Matlab, or R, Python does not come with a pre-bundled set of modules for scientific computing. Below are the basic building blocks that can be combined to obtain a scientific computing environment:
Python, a generic and modern computing language
• The language: flow control, data types (string, int), data collections (lists, dictionaries), etc.
• Modules of the standard library: string processing, file management, simple network protocols.
• A large number of specialized modules or applications written in Python: web framework, etc. . . . and scientific computing.
• Development tools (automatic testing, documentation generation)

Core numeric libraries
• Numpy: numerical computing with powerful numerical arrays objects, and routines to manip-
ulate them. http://www.numpy.org/

• Scipy : high-level numerical routines. Optimization, regression, interpolation, etc http://www. scipy.org/
• Matplotlib : 2-D visualization, “publication-ready” plots http://matplotlib.org/ See also:

Domain-specific packages,
• Mayavi for 3-D visualization
• pandas, statsmodels, seaborn for statistics

• sympy for symbolic computing
• scikit-image for image processing • scikit-learn for machine learning
and much more packages not documented in the scipy lectures.

1.4 The workflow: interactive environments and text editors
Interactive work to test and understand algorithms: In this section, we describe a workflow combining interactive work and consolidation.
Python is a general-purpose language. As such, there is not one blessed environment to work in, and not only one way of using it. Although this makes it harder for beginners to find their way, it makes it possible for Python to be used for programs, in web servers, or embedded devices.
1.4.1 Interactive work
We recommend an interactive work with the IPython console, or its offspring, the Jupyter notebook. They are handy to explore and understand algorithms.

To get the api details(docstring) using ?
pd.DataFrame?

NOTEBOOK Shortcuts - https://towardsdatascience.com/jypyter-notebook-shortcuts-bf0101a98330
What is Jupyter Notebook?
Jupyter Notebook is widely used for data analysis. I started to learn Data Science 2–3 months ago and I used this tool to explore some datasets (a collection of data). It’s awesome!
Let’s see the definition from the docs.
The notebooks documents are documents produced by the Jupyter Notebook App, which can contain both code (e.g. Python) and rich text elements (paragraphs, equations, links, etc..).
The Jupyter Notebook App is a client-server application that allows editing and running notebook documents by a browser.
Here you can find more detailed information if you want to.
Shortcuts
As a developer, I like to use shortcuts and snippets as much as I can. They just make writing code a lot easier and faster. I like to follow one rule:
If you start doing some action with the mouse, stop and think if there is a shortcut. If there is a one - use it.
When I started using Jupyter Notebook I didn’t know that there are shortcuts for this tool. Several times, I changed my cell type from code to markdown and I didn’t know how. As you can guess this caused me a lot of headache. One day I just saw that there is a Help > Keyboard Shortcuts link in the menu bar. To my surprise, it turned out that Jupyter Notebook has a ton of shortcuts.
In this article, I’ll show you my favorite ones. Note that the shortcuts are for Windows and Linux users. Anyway, for the Mac users, they’re different buttons for Ctrl, Shift, and Alt:
Ctrl: command key ⌘
Shift: Shift ⇧
Alt: option ⌥
First, we need to know that they are 2 modes in the Jupyter Notebook App: command mode and edit mode. I’ll start with the shortcuts shared between the two modes.
Shortcuts in both modes:
Shift + Enter run the current cell, select below
Ctrl + Enter run selected cells
Alt + Enter run the current cell, insert below
Ctrl + S save and checkpoint
While in command mode (press Esc to activate):
Enter take you into edit mode
H show all shortcuts
Up select cell above
Down select cell below
Shift + Up extend selected cells above
Shift + Down extend selected cells below
A insert cell above
B insert cell below
X cut selected cells
C copy selected cells
V paste cells below
Shift + V paste cells above
D, D (press the key twice) delete selected cells
Z undo cell deletion
S Save and Checkpoint
Y change the cell type to Code
M change the cell type to Markdown
P open the command palette.
This dialog helps you run any command by name. It’s really useful if you don’t know some shortcut or when you don’t have a shortcut for the wanted command.

Command Palette
Shift + Space scroll notebook up
Space scroll notebook down
While in edit mode (pressEnter to activate)
Esc take you into command mode
Tab code completion or indent
Shift + Tab tooltip
Ctrl + ] indent
Ctrl + [ dedent
Ctrl + A select all
Ctrl + Z undo
Ctrl + Shift + Z or Ctrl + Y redo
Ctrl + Home go to cell start
Ctrl + End go to cell end
Ctrl + Left go one word left
Ctrl + Right go one word right
Ctrl + Shift + P open the command palette
Down move cursor down
Up move cursor up
These are the shortcuts I use in my daily work. If you still need something that is not mentioned here you can find it in the keyboard shortcuts dialog (H). You can also edit existing or add more shortcuts from the Help > Edit Keyboard Shortcuts link in the menu bar. Clicking the link will open a dialog. At the bottom of it there are rules for adding or editing shortcuts. You need to use hyphens - to represent keys that should be pressed at the same time.
For example, I added a shortcut Ctrl-R for the restart kernel and run all cells command.

Magic functions The console and the notebooks support so-called magic functions by prefixing a command with the % character. For example, the run and whos functions from the previous section are magic functions. Note that, the setting automagic, which is enabled by default, allows you to omit the preceding % sign. Thus, you can just type the magic function and it will work.
Other useful magic functions are:
• %cd to change the current directory.
• %cpaste allows you to paste code, especially code from websites which has been prefixed with the standard Python prompt (e.g. >>>) or with an ipython prompt, (e.g. in [3]):

In [2]: %cpaste
Pasting code; enter '--' alone on the line to stop or use Ctrl-D. :>>> for i in range(3):
:... print(i)
:--
0
1
2

• %timeit allows you to time the execution of short snippets using the timeit module from the standard library:
   In [3]: %timeit x = 10
10000000 loops, best of 3: 39 ns per loop

• %debug allows you to enter post-mortem debugging. That is to say, if the code you try to execute, raises an exception, using %debug will enter the debugger at the point where the exception was thrown.

Aliases Furthermore IPython ships with various aliases which emulate common UNIX command line tools such as ls to list files, cp to copy files and rm to remove files (a full list of aliases is shown when typing alias).

Getting help
• The built-in cheat-sheet is accessible via the %quickref magic function. • A list of all available magic functions is shown when typing %magic.

CHAPTER 2 - The Python language
-------------------------------
Tip: Python is a programming language, as are C, Fortran, BASIC, PHP, etc. Some specific features of Python are as follows:
• an interpreted (as opposed to compiled) language. Contrary to e.g. C or Fortran, one does not compile Python code before executing it. In addition, Python can be used interactively: many Python interpreters are available, from which commands and scripts can be executed.
• a free software released under an open-source license: Python can be used and distributed free of charge, even for building commercial software.
• multi-platform: Python is available for all major operating systems, Windows, Linux/Unix, MacOS X, most likely your mobile phone OS, etc.
• a very readable language with clear non-verbose syntax

• a language for which a large variety of high-quality packages are available for various applications, from web frameworks to scientific computing.
• a language very easy to interface with other languages, in particular C and C++.
• Some other features of the language are illustrated just below. For example, Python is an object- oriented language, with dynamic typing (the same variable can contain objects of different types during the course of a program).

2.1 First steps
Start the Ipython shell (an enhanced interactive Python shell):
• by typing “ipython” from a Linux/Mac terminal, or from the Windows cmd shell,
• or by starting the program from a menu, e.g. in the Python(x,y) or EPD menu if you have installed one of these scientific-Python suites.
• or by starting the program from a menu, e.g. the Anaconda Navigator, the Python(x,y) menu or the EPD menu if you have installed one of these scientific-Python suites.
Tip: If you don’t have Ipython installed on your computer, other Python shells are available, such as the plain Python shell started by typing “python” in a terminal, or the Idle interpreter. However, we advise to use the Ipython shell because of its enhanced features, especially for interactive scientific computing.
Once you have started the interpreter, type

Tip: For collections of numerical data that all have the same type, it is often more efficient to use the array type provided by the numpy module. A NumPy array is a chunk of memory containing fixed-sized items. With NumPy arrays, operations on elements can be faster because elements are regularly spaced in memory and more operations are performed through specialized C functions instead of Python loops.

Difference between sorted and sort() in a list and same is the case with reverse and reversed().
sort() provides inplace sorting.
reverse() provides inplace sorting.
l = ['ram','sur','chan']
print(list(reversed(l)))
print(l)
print(l.reverse())
print(l)

Methods and Object-Oriented Programming
The notation rcolors.method() (e.g. rcolors.append(3) and colors.pop()) is our first example of object-oriented programming (OOP). Being a list, the object rcolors owns the method function that is called using the notation .. No further knowledge of OOP than understanding the notation . is necessary for going through this tutorial.

Tip: Strings are collections like lists. Hence they can be indexed and sliced, using the same syntax and rules.

A string is an immutable object and it is not possible to modify its contents. One may however create new strings from the original one.

Tip: A dictionary is basically an efficient table that maps keys to values. It is an ordered container

Tuples
Tuples are basically immutable lists. The elements of a tuple are written between parentheses, or just separated by commas:

Sets: unordered, unique items:

Assignment, copying of objects:
a=[1,2,3]
b=a
print(id(a)) # 4868453120
print(id(b)) # 4868453120

c=a.copy()
print(id(a)) # 4868453120
print(id(c)) # 4868454720

print(a is b) # True
print(a is c) # False

print(a == b) # True
print(a == c) # True

• the key concept here is mutable vs. immutable
– mutable objects can be changed in place
– immutable objects cannot be modified once created

Warning: Default values are evaluated when the function is defined, not when it is called. This can be problematic when using mutable types (e.g. dictionary or list) and modifying them in the function body, since the modifications will be persistent across invocations of the function.
Using an immutable type in a keyword argument:
In [124]: bigx = 10
In [125]: def double_it(x=bigx): .....: return x * 2 .....:
In [126]: bigx = 1e9 # Now really big
In [128]: double_it() Out[128]: 20
Using an mutable type in a keyword argument (and modifying it inside the function body):
In [2]: def add_to_dict(args={'a': 1, 'b': 2}):
for i in args.keys(): args[i] += 1
print(args) In [3]: add_to_dict
Out[3]: <function __main__.add_to_dict> In [4]: add_to_dict()
{'a': 2, 'b': 3}
In [5]: add_to_dict() {'a': 3, 'b': 4}
In [6]: add_to_dict() {'a': 4, 'b': 5}

Tip: More involved example implementing python’s slicing:
In [98]: def slicer(seq, start=None, stop=None, step=None):
....: """Implement basic python slicing."""
....: return seq[start:stop:step] ....:
In [101]: rhyme = 'one fish, two fish, red fish, blue fish'.split() In [102]: rhyme
Out[102]: ['one', 'fish,', 'two', 'fish,', 'red', 'fish,', 'blue', 'fish'] In [103]: slicer(rhyme)
Out[103]: ['one', 'fish,', 'two', 'fish,', 'red', 'fish,', 'blue', 'fish'] In [104]: slicer(rhyme, step=2)
Out[104]: ['one', 'two', 'red', 'blue'] In [105]: slicer(rhyme, 1, step=2)
Out[105]: ['fish,', 'fish,', 'fish,', 'fish']
In [106]: slicer(rhyme, start=1, stop=4, step=2) Out[106]: ['fish,', 'fish,']

The order of the keyword arguments does not matter:
 In [107]: slicer(rhyme, step=2, start=1, stop=4) Out[107]: ['fish,', 'fish,']

but it is good practice to use the same ordering as the function’s definition.
Keyword arguments are a very convenient feature for defining functions with a variable number of argu- ments, especially when default values are to be used in most calls to the function.

2.4.4 Passing by value
----------------------
Tip: Can you modify the value of a variable inside a function? Most languages (C, Java, . . . ) distinguish “passing by value” and “passing by reference”. In Python, such a distinction is somewhat artificial, and it is a bit subtle whether your variables are going to be modified or not. Fortunately, there exist clear rules.
Parameters to functions are references to objects, which are passed by value. When you pass a variable to a function, python passes the reference to the object to which the variable refers (the value). Not the variable itself.
If the value passed in a function is immutable, the function does not modify the caller’s variable. If the value is mutable, the function may modify the caller’s variable in-place:

  Tip: More involved example implementing python’s slicing:
In [98]: def slicer(seq, start=None, stop=None, step=None):
....: """Implement basic python slicing."""
....: return seq[start:stop:step] ....:
In [101]: rhyme = 'one fish, two fish, red fish, blue fish'.split() In [102]: rhyme
Out[102]: ['one', 'fish,', 'two', 'fish,', 'red', 'fish,', 'blue', 'fish'] In [103]: slicer(rhyme)
Out[103]: ['one', 'fish,', 'two', 'fish,', 'red', 'fish,', 'blue', 'fish'] In [104]: slicer(rhyme, step=2)
Out[104]: ['one', 'two', 'red', 'blue'] In [105]: slicer(rhyme, 1, step=2)
Out[105]: ['fish,', 'fish,', 'fish,', 'fish']
In [106]: slicer(rhyme, start=1, stop=4, step=2) Out[106]: ['fish,', 'fish,']
    In [107]: slicer(rhyme, step=2, start=1, stop=4) Out[107]: ['fish,', 'fish,']

>>> def try_to_modify(x, y, z):
... x=23
... y.append(42)
... z = [99] # new reference
... print(x)
... print(y)
... print(z)
..
>>> a = 77 # immutable variable >>> b = [99] # mutable variable >>> c = [28]
>>> try_to_modify(a, b, c)
23
[99, 42]
[99]
>>> print(a)
77
>>> print(b)
[99, 42]
>>> print(c)

Functions have a local variable table called a local namespace. The variable x only exists within the function try_to_modify.

IMP:
If data structure is immutable then original value won't be modified, for mutable objects like lists and df original df will be modified.

def change(ite):
    print('inside method')
    ite[1] = 100
    print(ite)
    return ite

l = [1,2,3,4]
print('outside l - ', l) # [1, 2, 3, 4]
change(l.copy()) - [1, 100, 3, 4]
print('outside l - ', l) - [1, 2, 3, 4]
change(l) - [1, 100, 3, 4]
print('outside without copy l - ', l) - [1, 100, 3, 4]

def test(df):
    df['te'] += df.te+1000
    return df

df = pd.DataFrame({
    'te':[11,12,13,14],
    'ten':[21,22,23,24]
})

print(df)
print('calling test method')
print(test(df.copy()))
print(df)

   te  ten
0  11   21
1  12   22
2  13   23
3  14   24
calling test method
     te  ten
0  1022   21
1  1024   22
2  1026   23
3  1028   24
   te  ten
0  11   21
1  12   22
2  13   23
3  14   24

2.4.5 Global variables
-----------------------
Variables declared outside the function can be referenced within the function:
But these “global” variables cannot be modified within the function, unless declared global in the function.
In [114]: x = 5
In [115]: def addx(y):
            return x + y
In [116]: addx(10)
Out[116]: 15

This doesn’t work:
In [117]: def setx(y):
.....: x=y
.....: print('x is %d' % x)

In [118]: setx(10) x is 10
In [120]: x Out[120]: 5

This works:
In [121]: def setx(y):
.....: global x
.....: x=y
.....: print('x is %d' % x)
.....:
In [122]: setx(10) x is 10
In [123]: x Out[123]: 10

2.4.6 Variable number of parameters
Special forms of parameters:
• *args: any number of positional arguments packed into a tuple
• **kwargs: any number of keyword arguments packed into a dictionary

def variable_args(*args, **kwargs):
....: print('args is', args)
....: print('kwargs is', kwargs) ....:
In [36]: variable_args('one', 'two', x=1, y=2, z=3) args is ('one', 'two')
kwargs is {'x': 1, 'y': 2, 'z': 3}

2.4.7 Docstrings
Documentation about what the function does and its parameters. General convention:

In [67]: def funcname(params):
....: """Concise one-line sentence describing the function. ....:
....: Extended summary which can contain multiple paragraphs.
....: """
....: # function body
   ....:     pass
   ....:
In [68]: funcname?
 Type:
Base Class:
String Form:
Namespace:
File:
Definition:
Docstring:
function
type 'function'>
<function funcname at 0xeaa0f0>
Interactive
<ipython console>
funcname(params)
Concise one-line sentence describing the function.
Extended summary which can contain multiple paragraphs.

Note: Docstring guidelines
For the sake of standardization, the Docstring Conventions webpage documents the semantics and con- ventions associated with Python docstrings.
Also, the Numpy and Scipy modules have defined a precise standard for documenting scientific functions, that you may want to follow for your own functions, with a Parameters section, an Examples section, etc.
See https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard

2.4.8 Functions are objects
Functions are first-class objects, which means they can be:
• assigned to a variable
• an item in a list (or any collection)
• passed as an argument to another function.

In [38]: va = variable_args
In [39]: va('three', x=1, y=2) args is ('three',)
kwargs is {'x': 1, 'y': 2}

2.4.9 Methods
Methods are functions attached to objects. You’ve seen these in our examples on lists, dictionaries, strings, etc. . .

2.4.10 Exercises
Exercise: Fibonacci sequence
Write a function that displays the n first terms of the Fibonacci sequence, defined by:
 𝑈 0 = 0
 𝑈1 = 1
𝑈𝑛+2 = 𝑈𝑛+1 + 𝑈𝑛

def fib(n):
    l = [0,1]
    if n in l:
        return n
    for i in range(n-2):
        l.append(l[-1] + l[-2])
    return l
fib(8)

Exercise: Quicksort
Implement the quicksort algorithm, as defined by wikipedia


Reusing Code: Scripts and Modules:
----------------------------------
2.5 Reusing code: scripts and modules
For now, we have typed all instructions in the interpreter. For longer sets of instructions we need to change track and write the code in text files (using a text editor), that we will call either scripts or modules. Use your favorite text editor (provided it offers syntax highlighting for Python), or the editor that comes with the Scientific Python Suite you may be using.

2.5.1 Scripts
Tip: Let us first write a script, that is a file with a sequence of instructions that are executed each time the script is called. Instructions may be e.g. copied-and-pasted from the interpreter (but take care to respect indentation rules!).
The extension for Python files is .py. Write or copy-and-paste the following lines in a file called test.py

msg = 'Hello, how are? Khana khake jaana haan!'
for i in msg.split():
    print(i)
Tip: Let us now execute the script interactively, that is inside the Ipython interpreter. This is maybe the most common use of scripts in scientific computing.
Note: in Ipython, the syntax to execute a script is %run script.py. For example,

%run test.py
Hello,
how
are?
Khana
khake
jaana
haan!

The script has been executed. Moreover the variables defined in the script (such as msg) are now available inside the interpreter’s namespace.
msg # 'Hello, how are? Khana khake jaana haan!'

Tip: Other interpreters also offer the possibility to execute scripts (e.g., execfile in the plain Python interpreter, etc.).
It is also possible In order to execute this script as a standalone program, by executing the script inside a shell terminal (Linux/Mac console or cmd Windows console). For example, if we are in the same directory as the test.py file, we can execute this in a console:
$ python test.py
Hello
how
are
you?


Tip: Standalone scripts may also take command-line arguments
In file.py:

import sys
print(sys.argv)

$ python file.py test arguments
['file.py', 'test', 'arguments']

Warning: Don’t implement option parsing yourself. Use a dedicated module such as argparse.

2.5.2 Importing objects from modules
   In [1]: import os
os # <module 'os' from '/Users/utsav/.conda/envs/myenv/lib/python3.9/os.py'>
os.listdir('.') # ['ScipyDoc1.ipynb', 'test.py', '.ipynb_checkpoints', 'ScipyNumpyDoc.txt']

And also:
from os import listdir
Importing shorthands:
import numpy as np

Warning:
from os import *
This is called the star import and please, Do not use it
• Makes the code harder to read and understand: where do symbols come from?
• Makes it impossible to guess the functionality by the context and the name (hint: os.name is the name of the OS), and to profit usefully from tab completion.
• Restricts the variable names you can use: os.name might override name, or vise-versa.
• Creates possible name clashes between modules.
• Makes the code impossible to statically check for undefined symbols.

Tip: Modules are thus a good way to organize code in a hierarchical way. Actually, all the scientific computing tools we are going to use are modules:
>>> import numpy as np # data arrays
>>> np.linspace(0, 10, 6)
array([ 0., 2., 4., 6., 8., 10.])
>>> import scipy # scientific computing

2.5.3 Creating modules
-----------------------
Tip: If we want to write larger and better organized programs (compared to simple scripts), where some objects are defined, (variables, functions, classes) and that we want to reuse several times, we have to create our own modules.
Let us create a module demo contained in the file demo.py:
