OOPS:
=====
class: A class is a blueprint/template or a plan based on which objects need to be created.
For a building/apartment once a plan is designed, then we can created any number of apartments(objects) based on that plan.

object: Physical existance of a plan is know as object.

Reference: Remote is an reference pointing to TV object.

class to object -- one to one/ one to many relationship
object to reference -- one to one/ one to many relationship
Eg: 
class Student():
    '''This is a class, created by Utsav'''#DocString
    def __init__(self, name, rollno):
        self.name=name
        self.rollno = rollno
        
    def talk(self):
        ''' This method should be used wisely'''
        print('Hi, My Name is: {} and roll no is {}'.format(self.name, self.rollno))

s1=Student('Ramesh', 101)
s2=Student('Suresh', 102)
print(s1.name, s2.rollno)
s1.talk()
s2.talk()
#Print doc string
print(Student.__doc__)
help(Student)
print(Student.talk.__doc__)


self: holds the current object
-----
Inside the class a variable is required pointing to the object i.e reference variable is self.
self is an implicit variable.
self is a reference variable which is pointing to current object.
For constructor and instance method, first argument should be self.
We do not need to provide values for self arguments but Python Virtual Machine does it.
By using self, we can declare and access instance variables.
self is used to differentiate between local variable and instance variable in a method.
In python, the variables declared under constructor are called instance variable.
Whatever, first argument we are passing is considered as self. But it recommended to used 'self' word.

class Student():
    '''This is a class, created by Utsav'''#DocString
    def __init__(self):
        print('*'*10)
        print(id(self))
        print('*'*10)
        
s1=Student()
print('S1', id(s1))

s2=Student()
print('S2', id(s2))

Constructor:
-------------
The name should always be __init__(self)
Whenever we create an object the constructor of the class is called automatically.
The main objective of constructor is to initialize and declare instance variable.
For every object constructor will be executed only once.
Constructor should have atleast one argument.
if we do not write a constructor then python will provide default constructor.
In python, constructor overloading, method overloading is not applicable. Even if we declare many constructors but the python will consider only last constructor.

Difference between method and constructor
Method: name - any
constructor: name - __init__
Constructor will be executed automatically whenever the object is created, Method will be executed when it is called.
Constructor can be executed only once per object, method can be executed any number of times.
Constructor is useful for instance variable initialization but method is used for business logic.

Types of variables: 3
----------------------
Instance variable/Object level variable
Static variable/ Class level variable
Local variable/ Method variable

Instance variables/ Object level variables: If the value of variable varies from object to -------------------------------------------object then they are known as instance variables. A separate copy will be created object to object.
Instance variables are defined by self(or any other name).

Where can instance variables be declared?
1. Inside Constructor using self
2. Inside instance method using self
3. Using reference variable for the object.(Outside of the class)

How to access instance variables?
Within class using self
Outside class using object reference

How to delete instance variables?
Within class: del self.variableName
Outside class: del objectReference.variableName

All the instance variables can be printed using print(s.__dict__)
Eg: 
class Student():
    '''This is a class, created by Utsav'''#DocString
    
    college_name='St. Joseph\'s'
    
    def __init__(self, name, rollno):
        self.name=name
        self.rollno = rollno
        
    def info(self):
        self.marks=90
        
s1=Student('Ramesh', 101)
print(s1.__dict__) # returns instance variables of the object
s1.info()
print(s1.__dict__)
s1.age=24
print(s1.__dict__)

Static variables/Class variables: variable remains common for all the objects are known as class level variables. No modifier is required. The variable which is declared inside class but outside constructor or method then it is called static variables.
Static variable can be decalared at below places:
1. Outside constructor and method
2. Inside constructor and method using className i.e className.variableName
3. Outside class using class name
4. In a class method using cls variable or class Name
5. Inside static methods using class name

Static variables can be accessed using below means:
Inside the class:
    using self - constructor and instance method
    using cls - class method
    using classname - any method within the class
Outside the class:
    using classname
    using object reference

Static variables can be modified/deleted as:
Inside the class:
    Using cls variable or className
Outside the class:
    Only using className

Example
class Test:
    a=10
    
    def __init__(self):
        print('inside constructor using className', Test.a)
        print('inside constructor using self', self.a)
        
    def m1(self):
        print('*'*20)
        print('inside instance method using className', Test.a)
        print('inside instance using self', self.a)
    
    @staticmethod
    def m2():
        print('*'*20)
        print('inside static method using className', Test.a)
    
    @classmethod
    def m3(cls):
        print('*'*20)
        print('inside class method using className', Test.a)
        print('inside class using cls', cls.a)
    
t = Test()
t.m1()
Test.m2()
Test.m3()
print('*'*20)
print('Outside class using className', Test.a)
print('Outside class using object reference', t.a)


local variables: The variables which are declared inside constructor or methods without self keyword are called local variables.

global variable: global variable is the concept of functional programming, we can define global variable inside a class instance method using global keyword.
Global variables can be accessed directly within an instance method of a class.

Type of methods:
Instance/Object Methods
Class Method
Static Method


1. Instance/Object methods: The method in which first argument is self and in which instance variables are used is called instance methods.

2. Class methods: For all class level variables and methods a class level object is created. If we want to use class related variables from a class method then the first argument of the method is cls(class)/any name can be used. Also, class level method variable name should be @classname

Difference between Instance and Static Methods:
1. If the method has atleast one instance variable then it is instance method, in the method body if we are using only static/class variables then it is highly recommended to go for static method.
2. To declare instance method we are not required to use any decorator but to declare class method we require @classmethod decorator.
3. The first argument to the instance method should be self, which is reference to current object and by using self, we can access instance variables inside methods. The first argument to the class method should be cls which is reference to the current class object and by using that we can access static variables.
4. Inside instance method we can access both instance and static variables but inside classmethod we can access only static variables and not instance variables.
5. We can call instance method by only object reference but we can call classmethod by either class Name or object reference but recommended to use className.

3. Static methods: Method which does not used class level or object level data. These methods are utility methods. Annotation/Decorator used for them is @staticmethod
Eg:
class Student():
    '''This is a class, created by Utsav'''#DocString
    
    college_name='St. Joseph\'s' / Class level variable
    
    def __init__(self, name, rollno):  # constructor
        self.name=name # instance method
        self.rollno = rollno
        
    def talk(self): 
        ''' This method should be used wisely'''
        x=10000 # local variable
        print('Hi, My Name is: {} and roll no is {}'.format(self.name, self.rollno))
        print('x', x)
    
    @classmethod   
    def getCollegeName(cls):
        print(cls.college_name)
        
    @staticmethod
    def getAverage():
        return 10/20

s1=Student(rollno=101, name='Ramesh')
s2=Student('Suresh', 102)
print(s1.name, s2.rollno)
s1.talk()
s2.talk()

Student.getCollegeName()
print(Student.getAverage())

When to use static/instance/class method:
1. if we are using atleast one instace variable then go for instance method.
2. if we are using only static/class level variable and not instance variables then we should go for class method.
3. if we are not using any static or instance variables then we can go for static methods, static methods are general purpose utility methods. 

Alternative to constructor is setter and getter methods:
If we have getter method then it provides data hiding i.e security we can provide validate logic inside the method.

If we are not using any decorator:
For class method, @classmethod decorator is necessary but for static method the decorator @staticmethod is optional.
Without decorator it can either be static method or instance method.
If it is called by using object reference then it is instance method.
If it is called by using class name then it is static method.


Inner Classes:
==============
The class which is declared inside another class.
Without existing one type of object if there is no chance of existing another type of object then we should go for inner classes.
Eg:
    class Car
        class Engine

    class College
        class Department

    class Body:
        class Head:

Hence, without existing outer class object there is no chance of existing inner class object. Inner class object is always associated with outer class object.

class Outer:
    def __init__(self):
        print('Outer class constructor')
    class Inner:
        def __init__(self):
            print('Inner class constructor')
        
        def m1(self):
            print('Inner class method')
            
Outer().Inner().m1()

class Person:
    def __init__(self):
        self.name='Ramesh'
        self.dob=self.DOB()
    def display(self):
        print('Name: ', self.name)
        self.dob.display()
    class DOB:
        def __init__(self):
            self.dd=22
            self.mm=12
            self.yyyy=1989
        def display(self):
            print('DOB is {}/{}/{}'.format(self.dd,self.mm,self.yyyy))

Person().display()


class Human:
    def __init__(self):
        self.name = 'Suresh'
        self.head = self.Head()
        
    def display(self):
        print('Name ', self.name)
        print('Head Method ', self.head.talk())
        print('Brain Method ', self.head.brain.think())
        
    class Head:
        def __init__(self):
            self.brain = self.Brain()
        
        def talk(self):
            print('Talking')
            return "Return Talking"
            
        class Brain:
            def think(self):
                print('Thinking')
                return "Return Thinking"
Human().display()

Nested Methods within a class: 2019.01.15
-----------------------------------------
class Body:
    def __init__(self):
        print('Body')
    
    def m1(self):
        def sumpro(a,b):
            print('sum:', a+b)
            print('prod:', a*b)
        sumpro(10,20)
        sumpro(100,200)
        
Body().m1()

Garbage Collection: import gc
-------------------
Constructor __init__(self): Used to initialize an object
Destructor __del__(self): Used for clean up activities before destroying object.

Based on our requirements we can enable and disable garbage collector like during trading hours if we don't need garbage collection then we can disable garbage collector during that period and then enable in post trading hours.

creation --> constructor --> use object --> destructor --> destroy object.

Objects which does not have any reference are garbage collected by gc.
GC has three main methods

gc.isEnabled() --> check if the garbage collector is enabled or not.
gc.disable() --> disable the garbage collector.
gc.enable() --> enable garbage collector.

import gc

print(gc.isenabled()) 
print(gc.disable())     
print(gc.isenabled())
print(gc.enable())
print(gc.isenabled())

Destructors: __del__(self)
------------
Like we have __init__(self) to instantiate the object similarly we have a destructor which is called by gc before destroying the object.
__del__(self) is used to cleanup activities before destroying the object.
It is similar to finalize() is java.
Just before destroying an object, GC always calls destructor to perform cleanup activities.
PVM calls GC  and GC calls destructor.

Eg:
import time
class GCDemo:
    def __init__(self):
        print('Object is being created')
    
    def __del__(self):
        print('Cleanup activities before destroying the object')
        
a=GCDemo()
print('Currently there is a reference')
a=None
time.sleep(2)
print('This brings us to the end of application')
a=GCDemo()
print('Again we have a reference')
del(a)
time.sleep(2)
print('Finally we have reached end of program')

Even if we do not de-reference the object then also just before the completion of the program gc destroys all objects of the applcation

class GCDemo:
    def __init__(self):
        print('Object is being created')
    
    def __del__(self):
        print('Cleanup activities before destroying the object')
        
a=GCDemo()
print('Currently there is a reference')
Output:
Object is being created
Cleanup activities before destroying the object
Currently there is a reference

Example: In list all objects are created and before application terminates gc destroys all objects by itself.
class GCDemo:
    def __init__(self):
        print('Object is being created')
    
    def __del__(self):
        print('Cleanup activities before destroying the object')

l=[GCDemo(), GCDemo(), GCDemo()]
print('After 3 objects creation and deletion,application is closed.')

Object is being created
Object is being created
Object is being created
Cleanup activities before destroying the object
Cleanup activities before destroying the object
Cleanup activities before destroying the object
After 3 objects creation and deletion,application is closed.

import time
import gc
class Test:
    def __init__(self):
        print('Inside constructor')
    def __del__(self):
        print('Before destruction')

t1=Test()
t1=None
time.sleep(3)
print('Program Ends')

How can we get the number of reference of the objects?
sys.getrefcount(objectReference) # No of references + 1 (self)

import sys
class GCDemo:
    def __init__(self):
        print('Object is being created')
    
    def __del__(self):
        print('Cleanup activities before destroying the object')
        
a=GCDemo()
b=a
c=a
d=b
print(sys.getrefcount(a))

=============
Polymorphism:
=============
Poly - means
morps - forms
i.e one name but multiple forms

Overloading:
------------
Same name various purpose.
Operator overloading: +, *
10+20=30
a+b=ab
10*3=30
a*3=aaa
deposit(cash)
deposit(cheque)
deposit(dd)

Operator Overloading:
---------------------
In java we don't have operator overloading but we have in python.
Eg: +, *

operator overloading is internally implemented using MAGIC METHODS:
+ --> __add__()

Eg:
class Book:
    def __init__(self, pages):
        self.pages=pages
    
    def __add__(self, other):
        return self.pages+other.pages
    
    def __sub__(self, other):
        return self.pages-other.pages
    
    def __mul__(self, other):
        return self.pages*other.pages

b1=Book(100)
b2=Book(200)
print(b1+b2)
print(b1-b2)
print(b1*b2)


Magic Methods:
+:__add__
-:__sub__
*:__mul__
/:__div__
%:__mod__
//:__floordiv__
**:__pow__

+= : __iadd__
-=, *=, /=. %=, //=, **= 

>= --> __ge__
<= --> __le__
<  --> __lt__
>  --> __gt__
== --> __eq__
!= --> __ne__

__str__(): similar to toString() method of java.
Whenever we are trying to print an object reference internally __str__ method is called in python.
b1=Book()
print(b1) # internally __str__ method will be called
Eg: class Book:
    def __init__(self, pages):
        self.pages = pages
        
    def __str__(self):
        return 'Number of pages in book are '+ str(self.pages)
b=Book(100) 
print(b)

Can we have __add__ method which takes more than two args?
No, add method is desiged in such a way in python that it takes two args at a time and the result is then added to the third arg.

There is a hack for this is which __str__ and __add__ method can be used.
Hack is return book object from __add__ method and then it can be printed as string in __str__ method.
class Book:
    def __init__(self, pages):
        self.pages = pages
        
    def __add__(self, other):
        print('add called')
        return Book(self.pages + other.pages)
    
    def __mul__(self, other):
        print('mul called')
        return Book(self.pages * other.pages)
        
    def __str__(self):
        return 'Number of pages in book are '+ str(self.pages)
    
b1 = Book(1)
b2 = Book(2)
b3 = Book(5)
b4 = Book(10)
print(b1+b2*b3+b4)

SO, whenever we are calling + operator then __add__() method will be called.
whenever we are printing book object reference then __str__() method will be called.

Eg:
class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks
    
    def __lt__(self, other):
        return self.marks < other.marks
    
s1 = Student('Ramesh',100)
s2 = Student('Suresh', 200)
print(s1<s2)
print(s1>s2)

Eg with multiple classes:
class Employee:
    def __init__(self, name, salaryPerHour):
        self.name = name
        self.salaryPerHour = salaryPerHour
        
    def __mul__(self, other):
        return self.salaryPerHour * other.noOfDays
    
class TimeSheet:
    def __init__(self, name, noOfDays):
        self.name = name
        self.noOfDays = noOfDays
e = Employee('Ramesh', 100)
t = TimeSheet('Ramesh', 25)
print('Salary of this month', e*t)

Why python does not support method or constructor overloading?
While defining overloading we are always going to talk about arguments type but in case of python there isn't type then there is no option to differentiate the methods with same and different argument type.
Here we can pass any type of data to the method like a method which takes one arg and you want to pass string and int to it for that we would require two methods in languages like java where method overloading is allowed but in case of python single method can do that job.

public void m1(int a){}
public void m1(String a){}

In python single method can take args of two different type.
def m1(self, a): 
    print(a)
m1(10)
m1('abc')

Eg: def m1(a,b):
    print(a+b)
m1('a','b')
m1(10, 20)

Next thing is number of arguments for overloading - this can be solved using var args *args
def m1(*args):
    total = 0
    for i in args:
        total += i
    print(total)
m1(10,20)
m1(10)
m1(10,20,30)
m1(10,20,30,40)
m1()
m1(100,200)

If a class consists of more than one methods/constructor with same name then only last method will be considered.

Aggregation and Compositions: has a relationship
-----------------------------
Strong relationship(association) between two objects is called Composition like University and Department.
Department is of no use without University.

Weak relationship(association) between two objects is called Aggregation like Professor and University.
Professor does not live and die with University.

Like Student and Name, i.e without Student there is no Name hence composition.
Student and College Name i.e without Student there can be college Name

Hence, Student has a name(Composition), Student has a college name(Aggregation)

The relation between object and instance variable is composition and the relation between object and static variable is aggregation.

class Student:
    collegeName = 'PCE'
    
    def __init__(self, name):
        self.name = name
    
print(Student.collegeName)
print(Student('Ramesh').name)

------------
Inheritance:
------------
Advantage:
    Code reusability
    Extend Functionality

Example:
class P:
    def property(self):
        print('cash+land+shares+power')
    def marriage(self):
        print('Katrina')
class C(P):
    def marriage(self):
        super().marriage()
        print('Deepika')
        
c = C()
c.property()
c.marriage()

Type of Inheritance:
Single Inheritance
Multilevel Inheritance
Hierarical Inheritance
Multiple Inheritance
Hybrid Inheritance
Cyclic Inheritance - Not supported by Python and Java - Eg: A(A)# A extends A or A(B) and B(A)#A extends B and B extends A

Single Inheritance:
--------------------
The process of inheriting properties from one parent to one child is called Single Inheritance.

Eg:
class P:
    def m1(self):
        print('Parent')

class C(P):
    def m2(self):
        print('Child')
        
c=C()
c.m1()
c.m2()

Multilevel Inheritance:
-----------------------
A is parent of B which is parent of C
class P:
    def m1(self):
        print('Parent')

class C(P):
    def m2(self):
        print('Child')
        
class GC(C):
    def m3(self):
        print('Grand Child')
        
gc=GC()
gc.m1()
gc.m2()
gc.m3()

Hierarical Inheritance:
-----------------------
Single parent and multiple child
Eg:
class P:
    def m1(self):
        print('Parent')

class C1(P):
    def m2(self):
        print('Child 1')
        
class C2(P):
    def m2(self):
        print('Child 2')
        
c1=C1()
c1.m1()
c1.m2()

c2=C2()
c2.m1()
c2.m2()

Multiple Inheritance:
----------------------
Multiple parents and Single child

How ambiguity or Diamond access problem is solved in Multiple Inheritance in Python?
Order - first contact first person.
class P1:
    def m1(self):
        print('Parent 1')

class P2:
    def m1(self):
        print('Parent 2')
        
class C(P1,P2):
    pass

c=C()
c.m1()


Hybrid Inheritance: Single + Multilevel + Hierarical + Multiple
--------------------
Combination of Two or More Inheritance is called Hybrid Inheritance.

Method Resolution in Hybrid Inheritance: (MRO -- Method Resolution Order) - Depth First Left to Right ALgo is used
-------------------------------------------------------------------------
class GP:
    def m1(self):
        print('GP')
        
class P(GP):
    def m1(self):
        print('Parent')
        
class C(P):
    def m1(self):
        print('Child')
        
class Chacha(GP):
    def m1(self):
        print('Chacha')
        
print(C.mro())
Output: [<class '__main__.C'>, <class '__main__.P'>, <class '__main__.GP'>, <class 'object'>]

class A:pass
class B(A):pass
class C(A):pass
class D(B,C):pass
        
print(D.mro())
[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]

Eg: C3 Algorithm:


class A:pass
class B:pass
class C:pass
class X(A,B):pass
class Y(B,C):pass
class P(X,Y,C):pass
        
print(P.mro())
[<class '__main__.P'>, <class '__main__.X'>, <class '__main__.A'>, <class '__main__.Y'>, <class '__main__.B'>, <class '__main__.C'>, <class 'object'>]

class D:pass
class E:pass
class F:pass
class B(E,D):pass
class C(D,F):pass
class A(B,C):pass

print(A.mro())
 
#A,B,E,C,D,F --> A -- B -- E -- C(since D is common parent of B and C) -- D --F

super():
useful in inheritance.
to call parent class members from child class we can use super().
It provides the advantage of code reusability.

Eg:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def display(self):
        print('Name ', self.name)
        print('Age ', self.age)
        
class Student(Person):
    def __init__(self,name,age,rollno,marks):
        super().__init__(name, age)
        self.rollno = rollno
        self.marks = marks
    def display(self):
        super().display()
        print('RollNo ', self.rollno)
        print('Marks ', self.marks)
        
class Teacher(Person):
    def __init__(self,name,age,salary,subject):
        super().__init__(name, age)
        self.salary = salary
        self.subject = subject
    def display(self):
        super().display()
        print('Salary ', self.salary)
        print('Subject ', self.subject)
        
s = Student('Ramesh',10,101,90)
t = Teacher('Chandu',31,10000,'Python')
s.display()
print('*'*15)
t.display()

Eg:
Natural order is calling super class of immideate parent but if we want to call method from a specific grandparent then we can follow super(childOFThatParent,self).m1()
class A:
    def m1(self):
        print('A')
class B(A):
    def m1(self):
        print('B')
class C(B):
    def m1(self):
        print('C')
class D(C):
    def m1(self):
        super(C,self).m1() # Calling m1() of B class

D().m1()

Super cannot be used to call parent class instance variables. We should use self only. But we can use super to call static variables from parent class.

---------------------
File Handling:

Two types of files:
1. Text files - text data like name of students, marks of students etc
2. Binary files - images, video files, audio files etc

Steps to work with files: In order read/write to a file 
first we need to open the file:
open('complete file name with path', 'mode like read/write/append')
f = open('abc.txt','w')
    Different modes of file in python for text files - 7 modes
    Default mode is r i.e read
        w - write
            open a file for write operation. If the specified file is not present then create it.
            If file already exists then it will apply override operation i.e existing data will be gone.

        r - read
            open a file for read operation. File pointer is at the beginning of the file.
            If the specified file is not present then we will get FileNotFoundError.

        a - append
            same as w except the old data won't be gone. 

        r+ - read and then write
                the file pointer will be at the beginning.

        w+ - write and then read
                overwrite existing data
        a+ - append and then read

        x - exclusive
                similar to write but it will work only if file is not already present, if the file is 
                already present then it won't overrwite the data rather it will raise FileExists error.

        Binary files also have same modes but with a difference as below.
        rb, wb, ab, rb+, wb+, ab+, xb+

Various properties on file object:
f = open('abc.txt','r')
then below properties can be applied
variables:
f.name
f.mode
f.closed
method:
f.readable()
f.writable()

Eg:
f=open('abc.txt','a')
print('File Name', f.name)
print('File Name', f.mode)
print('File Name', f.readable())
print('File Name', f.writable())
print('File Name', f.closed)
f.close()
print('File Name', f.closed)

Writing data to the file:
f.write(str) - to write a single string
f.writelines(list of lines) - to write a list of lines

Eg: with open('abc.txt','w') as f:
    f.write('Utsav is a hero who is \n')
    f.write('is\n')
    f.write('Awesome\n')

Eg:
with open('abc.txt','w') as f:
    f.writelines(['sunny\n','bunny\n','chinny\n','vinny\n'])

Reading character data from text file:
f.read() - to read total data from the file
f.read(n) - to read n characters from the file
f.readline() - to read only one line
f.readlines() - to read all lines into a list

Eg: 
with open('abc.txt') as f:
    print(f.read())

Thread:
Various ways to create thread.
1. when using run method of Thread class
t = Thread()
t.start()

2. when using user defined method
t = Thread(target = display())
t.start() 

3. same as 2nd option but with method being instance method of a class
t = Thread(target = MyThread().display())
t.start()

If the main thread has to wait for completion of child thread (t1) then use join()
t1.join([seconds for waiting]) # Main thread will wait for the completion of t1 thread.

ident:
Each thread has an identification number associated with it which can be seen using t.ident variable.

get and set thread name:
current_thread.getName()
current_thread.setName('TestThread')
current_thread.name = 'TestThread'

active_count() - get number of active threads in the program.
enumerate() - provides a list with details of all active threads like threadname, identification number etc.
isAlive() - check if a thread is alive, returns boolean.

from threading import *
import time
def display():
    print('current thread started ', current_thread().getName())
    time.sleep(3)
    print('current thread started ', current_thread().getName())
print('Active count ', active_count())    
t1 = Thread(target=display)
t2 = Thread(target=display)
t3 = Thread(target=display)
t1.start()
time.sleep(0.5)
t2.start()
time.sleep(0.2)
t3.start()
print('Active count ', active_count())
time.sleep(6)
l = enumerate()
for t in l:
    print('Thread name ', t.name)
    print('Thread ident ', t.ident)


Deamon Thread - The threads running in the background are deamon threads.
The main purpose of the main thread is to provides support to the main threads.
Eg:
Movie - Deamon Thread - Producer, director, cameraman
Main Thread - hero heroine


---------------
Ducktyping philosophy of python:

Overloading
	Operator overloading
	Method overloading
	Constructor overloading
Overriding
	Method Overriding
	constructor overriding 

---------------
MultiThreading:
---------------
Multitasking:
---------------
Process based Multitasking: OS level
Thread based Multitasking:
---------------------------
One Process, multiple threads.
Each task is independent part of same program.
Thread:
An independent part of a program is called a thread.
A flow of execution is called Thread.
It is a python object.

When should we go for multithreading?
Whenever there are indiviual events needs to be performed then we can go  for multithreading.

Python provides inbuilt support for multithreding via threading module.

Main Thread name is MainThread.
print('Current Thread', threading.current_thread().getName())

How many ways can we create Thread in Python? Three Ways
1. Creating a Thread without using any class
2. Creating a Thread by extending Thread class
3. Creating a Thread by without extending Thread class

join(): If a thread wants to wait for other threads completion then it call join().
-------Say main thread wants to wait for child thread t1 to complete then main thread calls 
t1.join()

Setting and getting name of a thread:
-------------------------------------
t.getName() or current_thread().name
t.setName() or current_thread().name='New Name'

1. Creating a Thread without using any class
---------------------------------------------
import threading

def display():
    for i in range(10):
        print('Child Thread')
        
t=threading.Thread(target=display) #Creation of Thread and calling dispaly method
t.start()

for i in range(10):
    print('MainThread')


2. Creating a Thread by extending Thread class
----------------------------------------------
import threading

class MyThread(threading.Thread):
    def run(self):
        for i in range(10):
            print('Child Thread', threading.current_thread().getName())

t=MyThread()
t.start()

for i in range(10):
            print('Parent Thread', threading.current_thread().getName()) 

3. Creating a Thread by without extending Thread class
-------------------------------------------------------
from threading import *

class Test:
    def m1(self):
        for i in range(10):
            print('Child Thread')

t=Thread(target=Test().m1)
t.start()

for i in range(10):
    print('Parent Thread')  

Eg: 
import threading
import time

def doubles(numbers):
    for i in numbers:
        time.sleep(1)
        print('Doubles', 2*i)
        
def squares(numbers):
    for i in numbers:
        time.sleep(1)
        print('Squares', i*i)

numbers=[1,2,3,4,5,6]
begintime=time.time()
t1=threading.Thread(target=doubles, args=(numbers,))
t2=threading.Thread(target=squares, args=(numbers,))

t1.start()
t2.start()

t1.join() #Main Thread waiting for T1 to complete
t2.join() #Main Thread waiting for T2 to complete

endtime=time.time()
print('Time Taken', endtime-begintime)

Daemon Threads:
---------------
Background executing threads are called Daemon Thread.
Their purpose is to support for non-deamon threads.
Eg. Garbage collector

check if a thread is daemon or not? using isDaemon() or daemon variable - both return boolean value
print(threading.current_thread().isDaemon())
print(threading.current_thread().daemon)

is it possible to change Daemon nature of a  thread? setDaemon(True/False)
Restriction to use this method: Before starting thread only we can change its daemon nature, once thread is started then we cannot change its daemon nature.
Otherwise: RuntimeError: cannot set daemon status of active thread

Daemon Thread is killed as soon as the last non-deamon thread terminates.

Default Nature of Thread:
-------------------------
Only Main thread is non-daemon.
All remaining threads daemon nature will be inherited from parent.

What is the main advatage of having non daemon thread?
In video game once last car reached destination then roads bridges are not required.
Therefore there isn't any need to kill daemon threads since after completion of last non-daemon thread, all the daemon thread will be killed my themselves.
    
Generators:
===========
Generator function won't take any input, it is responsible to generate a sequence of values.
yield keyword - it is used to generate sequence using yield.
Biggest advantage of generator is the values won't be created and stored rather at the time of necessary they will be generated and provided.
Example:
def fib():
    a,b=0,1
    while True:
        yield a
        a,b=b,a+b
for n in fib():
    if n>100:
        break
    print(n)

Hence generators provides great memory advantage over range, list etc.
It is most widely used in web scraping where we have to read large files.
It also provides performance benifits:
Eg: For generators it takes less time compared to creating same about of object in list.
import random
import time

names = ['Ramesh','Suresh', 'Chandu', 'Maghu']
lang = ['Python', 'java', 'kdb']

def people_list(num):
    result = list()
    for i in range(num):
        d = {'id':i, 'name':random.choice(names), 'lang':random.choice(lang)}
    result.append(d)
    return result

def people_gen(num):
    for i in range(num):
        d = {'id':i, 'name':random.choice(names), 'lang':random.choice(lang)}
    yield d
    
t1=time.process_time()
p=people_list(1000000)
print('List time', time.process_time() - t1)

t1=time.process_time()
p=people_gen(1000000)
print('Gen time', time.process_time() - t1)


Assertions:
-----------
Assetion is used for debugging purpose.
The process of identifying and fixing the bug is called debugging.
assertion is applicable only in dev and test env.

Types of asserts statments - two
Simple
    assert(conditional statement) - Condition is true means everything is good till here.
    if false then AssertionError is raised
    Eg:
        def m():
            x=10
            x+=1
            assert(x==10) # Assertion Error
            print(x)
        m()

Augmented: Other then just Assertion Error if we want to display some other msg then we can go for augmented version of assert.
Eg:
def m():
    x=10
    x+=1
    assert x==10, 'Here x should be greater than 10' # Assertion Error
    print(x)
    
m()
Augmented version is always recommended because it gives extra information.

py -o test.py is used in order to ignore assert statements.